xix2034 18683354215


#. 小程序适合哪些

	像知乎这种社区性的应用，是依赖于系统的主动消息推送的，但是小程序只有一个模板机制，并且不是主动推送的

	用户停留时间很久的应用也不适合

	直播，社区都不适合

	不能跟ios、Android这些寄生于操作系统上的应用来比较，

#. html 	骨架
	css		样式
	js		逻辑
	json	配置

#. <text>	

	该标签包裹的文字，可以实现长按选中复制功能，

	可以转义字符： <text>你好 \n 吃饭了么？</text>

					你好
					吃饭了么


#. <image>	

	如不指定宽高，默认是300 * 225

	绝对路径(从根目录像下查找): src='/images/avater.jpg'			

	相对路径(以当前页面为参照标准向外查找): src='../../images/avater.jpg'		

#. <page>

	通过查看DOM发现，自己写的所有结构都包裹在了<page>标签中，所以我们可以在此标签上添加background-color,确保上拉下滑时还是有底色的

#. vertical-align:middle
	
	实现图片和文字水平对齐

	图片和文字都要有 vertical-align:middle 语句，这样才会基于基线对齐

#. MINA框架

	onload

	onshow

	onready

#. wx:if

	显示：	<image wx:if='{{true}}'>		
			<image ex:if='{{isShow}}'>		isShow = true;

	隐藏：	<image wx:if='{{false}}'>		会对花括号里的值进行boolean转换,所以这里的false还是false，这里的true就是true
			<image ex:if='{{isShow}}'>		没有对isShow赋值


#. <block>
	
	1. <block>只是一个包装元素，类似于view，不会在页面中做任何渲染，只接受控制属性：

		<block wx:if>

		<block wx:for>

	2. 一般，block会包含多个节点（view）

		<block wx:for='{{lists}}'>
			<view>{{index}}</view>
			<view>{{item}}</view>
		</block>

	3. <block wx:for='{{lists}}'  wx:for-item='item' wx:for-index='i' wx:key='index'>

		wx:for的默认value是item，默认索引是index

#. wx:if 和 hidden

	wx:if是惰性的，如果在初始渲染条件为false，框架什么也不做，在条件第一次变成真的时候才开始局部渲染		

	hidden，始终都会渲染，只是简单地的控制显示与隐藏

	总结：	wx:if有更高的切换消耗，hidden有更高的初始渲染消耗。

			因此，如果需要频繁切换的情景，用hidden更好，如果在运行时条件不大可能改变，则用wx:if较好。

#. font-weight

	bold === 700

	normal === 400

#. 事件
	
	事件，是视图层到逻辑层的通讯方式，事件可以将用户的行为反馈到逻辑层进行处理

	冒泡事件： 由target像父节点传递，

		<view id="outer" bindtap="handleTap1">
		  outer 
		  <view id="middle" catchtap="handleTap2">
		    middle 
		    <view id="inner" bindtap="handleTap3">
		      inner 
		    </view>
		  </view>
		</view>

		实际表现就是，点击inner，会打印三个event信息，即，父节点都执行了

#. wx.navigateTo()		
	
	
	url必须是绝对路径 /pages/posts/post

	使用该方法跳转，是有返回按钮的，说明当前页面是跳转前页面的子页面

	是父子关系页面的跳转

	调用onHide钩子，页面隐藏


#. wx.redirectTo()

	wx.redirectTo({
      url: '/pages/posts/post',
      success: function(){
        console.log('redirect--success');
      },
      fail: function () {
        console.log('redirect--fail');
      },
      complete: function () {
        console.log('redirect--complete');
      }
    })

	关闭当前页面，跳转到应用内的某个页面，没有返回键

	是平级之间的跳转

	调用onUnload钩子,页面卸载

	应用场景： 首页中的 "开启应用" 按钮点击后，正式跳转到应用首页

	运行顺序是：		redirect--success > redirect--complete > 启动页：onunload


#. 冒泡事件的应用场景

	1. 不好的应用：

		点击div隐藏另一个div，点击空白页，显示div

		如果不阻止事件冒泡，红色div永远不会显示，因为总会冒泡到document上，

		var blue = document.getElementById('blue');
		var red = document.getElementById('red');

		blue.onclick = function(e){
			e.stopPropagation();
			red.style.display = 'block';
		};

		document.addEventListener('click', function(){		// 阻止事件冒泡
			red.style.display = 'none';
		}, true);

	2. 优点： 事件委托（事件代理）

		可以提高很大的性能

			<ul id="ul">
				<li>1</li>
				<li>2</li>
				<li>3</li>
				<li>4</li>
				<li>5</li>
			</ul>

			a. 不好的写法：

				每个li上绑定一个click事件

			b. 在ul上绑定事件

				ul.onclick = function(ev){
					var e = ev || window.ev;				// 获取event对象
					var target = e.target || e.srcElement;	// 获取触发事件的目标对象
					target.style.color = 'red';	// 主流
				};


	2. 阻止事件冒泡

		event.stopPropagation();	// 主流

		window.event.cancelBubble = true;	// IE，注意是window.event

		封装：

			function stopBubble(e){
				if( e && e.stopPropagation){
					e.stopPropagation();
				}else{
					window.e.cancelBubble = true;
				}
			}

#. 格式化代码
	
	alt + shift + F

#. template

	定义template代码片段

		<template name='postItem'>
			<txt>{{item.title}}</text>	// 如果data='{{item}}'
			<txt>{{title}}</text>	    // 如果data='{{...item}}'
		</template>

	使用：

		WXML:

			<import src='../../template/post-item-template.wxml' />

			<template is='postItem' data='{{item}}'></template>

		WXSS：

			@import './post-item/post-item-template.wxss';

	注意：

		使用时，import导入需要的模板文件，必须加/封闭import标签，否则报错

		template中的is属性对应定义好的代码片段中的name属性值

		data属性是将template需要的数据传递给代码片段

		template内如果有image,最好使用绝对路径，因为你不知道该模板会用到哪里

		如果模板上传递的data直接是一个对象(data='{{item}}')，而不是用rest操作符展开的对象(data='{{...item}}'),那么在模板上获取传递过去的数据时，还是用item.title获取，因为在实际的渲染中，template内的代码是要替换到占位符的地方，

	模板中的事件：

		movie-list-tpl.wxml:

			<view bindtap='moreMovie'>
	          <text class='movie-list-more'>更多</text>
	          <image src='/images/icons/arrow-right.png'></image>
	        </view>		

		movie-list-tpl.js:

			var movieListTplEvents = {
			  // 更多电影
			  moreMovie: function (event) {
			    wx.navigateTo({
			      url: "/pages/movies/more-movie/more-movie"
			    })
			  }
			};
			//导出，供外部使用
			export default movieListTplEvents	        

		movie.wxml:

			<view catchtap='test'>	// 这里也定义一个方法
			    <template is='movie-list' data='{{...inTheaters}}'></template>
			</view>

		movie.js:			

			import movieListTplEvents from '../../template/movie-list/movie-list-tpl.js';

			test: function(event){
			    console.log('有没有把tpl.js引进来', movieListTplEvents);
			    movieListTplEvents.moreMovie(event);
			}

#. wx.getStorage

	同步： wx.getStorageSync('hello');

	异步： wx.getStorage({
			key: 'hello',
			success: function(data){

			}
		  });		

#. flex模型

	1. 元素是垂直布局，并且左右居中：

		.container{
			display: flex;
			flex-direction: column;
			align-items: center;
		}	

#. babel index.js
	
	运行该命令，会将index.js中es6语法转化对应的es5语法输出

	如： 

		[1,2,3].map(el => el+1);

		转化后：

		[1,2,3].map(function(el){
			return el+1;
		});

	如运行该命令报错，可能是没有安装 npm install --save-dev babel-cli

#. source map	

	项目上线时，我们通常会对代码进行压缩打包以减少体积，从而有效提高访问速度。然而压缩代码的报错信息是很难debug的，因为他的行号和列号已经失真，这个时候我们就需要sourcemap来还原真实的出错位置。

	各种前端主流任务管理工具，打包工具都支持生成source map

	source map是一个json文件，包含代码转换前后的位置信息

#. 时刻注意用this.setData去更新值

#. 豆瓣api
	
	api/douban.com/v2/movie/subject/26683290

	地址栏输入这个url可以获取接口信息

	id: 26683290 可以自己搜索你的名字，然后从url中获取到这部电影的id

#. api rate limit

	速率限制，为防止滥用，应该考虑对API做限流。例如，可以限制每个用户10分钟内最多调用API 100次。如果在规定的时间内接收了一个用户大量的请求，将返回相应状态码429（这以为是过多的请求）

#. 4个新的HTTP状态码

	RFC 6585最近刚刚发布，该文档描述了4个新的http状态码。http协议一直在演变，新的状态码对于开发REST 服务或者说基于http的服务非常有用

	428 要求先决条件

	429 too many requests(太多请求)

	431 请求头字段太大

	511 要求网络认证

#. no-referrer-when-downgrade

	仅当发生协议降级（如：https页面引入http资源，从https页面跳到http等）	时不发送Referrer信息。这个规则是现在大部分浏览器默认采用的。

	在页面引入图片，js等资源，或者从一个页面跳到另一个页面，都会产生新的http请求，浏览器一般都会给这些请求头加上表示来源的Referrer字段。该字段在分析用户来源时很有用

#. node转发豆瓣api，解决403问题
	
	搭建node服务器

	npm init -y (新建默认的package.json)

	npm install --save express request 模块

	新建 server.js

		var express = require("express");
		var app = express();
		var request = require('request');

		app.get("/*", (req, res, next)=> {
		    request('https://api.douban.com' + req.url, function(error, response, body) {
		        res.send(body);
		    });
		})

		app.listen(3000);

	运行node服务器

		node server.js

	本地的请求地址为：

		http://localhost:3000/v2/movie/top250				


#. 豆瓣返回的错误信息
	
	{
		code:112,
		msg: 'rate_limit_exceeded2: 116.226.3.152'
		request: 'GET /v2/movie/in_theaters'
	}

	IP 访问速度限制

#. promise.all实际应用
	
	// 获取电影数据
  	getMovieListData: function (resolve,doubanBaseUrl, url){
  	  var self = this;
  	  wx.request({
	      url: doubanBaseUrl + url +'?start=0&count=3&city=上海',
	      method: 'GET',
	      header: { 'content-type': 'application/json' },
	      success: function(res){
	        // console.log('成功回调',res);
	        

	        resolve(res);
	      },
	      fail: function(error){
	        console.log(error);
	      }
  	  });
  	}
	
	// 正在热映
	var inTheatersPromise = new Promise((resolve,reject) => {
      return this.getMovieListData(resolve,doubanBaseUrl, inTheatersUrl);
    });

    // 即将上映
    var comingSoonPromise = new Promise((resolve, reject) => {
      return this.getMovieListData(resolve, doubanBaseUrl, comingSoonsUrl);
    });

    // top250
    var top250Promise = new Promise((resolve, reject) => {
      return this.getMovieListData(resolve, doubanBaseUrl, top250Url);
    });

    Promise.all([inTheatersPromise, comingSoonPromise, top250Promise])
      .then(data => {
        data.forEach(el => {
          var movieData = el.data.subjects;
          var result = movieData.filter(el => {
            if(el.title.length >= 7){
              el.title = el.title.substring(0,7) + '...';
            }
            return el;
          });
        })
        this.setData({
          inTheaters: data[0].data.subjects,
          comingSoon: data[1].data.subjects,
          top250: data[2].data.subjects
        });
      })
      .catch(error => console.log('promise',error));

#. 动态设置导航条title

	在onReady钩子中设置，不能再onLoad中，onLoad中不能操作UI相关，因为这个时候页面还没渲染完毕

#. 0/0 = NaN	
   1/0 = Infinity
   -1/0 = -Infinity

   总结： 任何数值除以0都会导致错误而终止程序执行。但是在js中，会返回特殊的值，因此不会影响程序的执行。

   比0大的数除以0，则会得到无穷大

#. 上下左右居中
	
	HTML: 
			<div class="box">
				<span>
					<a>a</a>
					<a>b</a>
				</span>
			</div>

	CSS:
		1. position + trnasfrom

			.box{
				width: 200px;
				height: 200px;
				border:1px solid #ccc;
				position: relative;
			}
			span{
				background: pink;
				position: absolute;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);		// 关键（之前都是负margin）
			}

		2. flex

			.box{
				width: 200px;
				height: 200px;
				border:1px solid #ccc;
				display: flex;
				align-items: center;
				justify-content: center;
			}
			span{
				background: pink;
			}


#. 附件上传的安全过滤问题

#. 现在浏览器支持使用两种不同的API发起http请求：

	XMLHttpRequest接口 和 fetch() API

#. 强制类型转换为boolean类型

	!!()

	!!('hello') // true
	!!(null)    // false


