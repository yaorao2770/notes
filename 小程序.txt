xix2034 18683354215


#. 小程序适合哪些

	像知乎这种社区性的应用，是依赖于系统的主动消息推送的，但是小程序只有一个模板机制，并且不是主动推送的

	用户停留时间很久的应用也不适合

	直播，社区都不适合

	不能跟ios、Android这些寄生于操作系统上的应用来比较，

#. html 	骨架
	css		样式
	js		逻辑
	json	配置

#. <text>	

	该标签包裹的文字，可以实现长按选中复制功能，

	可以转义字符： <text>你好 \n 吃饭了么？</text>

					你好
					吃饭了么


#. <image>	

	如不指定宽高，默认是300 * 225

	绝对路径(从根目录像下查找): src='/images/avater.jpg'			

	相对路径(以当前页面为参照标准向外查找): src='../../images/avater.jpg'		

#. <page>

	通过查看DOM发现，自己写的所有结构都包裹在了<page>标签中，所以我们可以在此标签上添加background-color,确保上拉下滑时还是有底色的

#. vertical-align:middle
	
	实现图片和文字水平对齐

	图片和文字都要有 vertical-align:middle 语句，这样才会基于基线对齐

#. MINA框架

	onload

	onshow

	onready

#. wx:if

	显示：	<image wx:if='{{true}}'>		
			<image ex:if='{{isShow}}'>		isShow = true;

	隐藏：	<image wx:if='{{false}}'>		会对花括号里的值进行boolean转换,所以这里的false还是false，这里的true就是true
			<image ex:if='{{isShow}}'>		没有对isShow赋值


#. <block>
	
	1. <block>只是一个包装元素，类似于view，不会在页面中做任何渲染，只接受控制属性：

		<block wx:if>

		<block wx:for>

	2. 一般，block会包含多个节点（view）

		<block wx:for='{{lists}}'>
			<view>{{index}}</view>
			<view>{{item}}</view>
		</block>

	3. <block wx:for='{{lists}}'  wx:for-item='item' wx:for-index='i' wx:key='index'>

		wx:for的默认value是item，默认索引是index

#. wx:if 和 hidden

	wx:if是惰性的，如果在初始渲染条件为false，框架什么也不做，在条件第一次变成真的时候才开始局部渲染		

	hidden，始终都会渲染，只是简单地的控制显示与隐藏

	总结：	wx:if有更高的切换消耗，hidden有更高的初始渲染消耗。

			因此，如果需要频繁切换的情景，用hidden更好，如果在运行时条件不大可能改变，则用wx:if较好。

#. font-weight

	bold === 700

	normal === 400

#. 事件
	
	事件，是视图层到逻辑层的通讯方式，事件可以将用户的行为反馈到逻辑层进行处理

	冒泡事件： 由target像父节点传递，

		<view id="outer" bindtap="handleTap1">
		  outer 
		  <view id="middle" catchtap="handleTap2">
		    middle 
		    <view id="inner" bindtap="handleTap3">
		      inner 
		    </view>
		  </view>
		</view>

		实际表现就是，点击inner，会打印三个event信息，即，父节点都执行了

#. wx.navigateTo()		
	
	
	url必须是绝对路径 /pages/posts/post

	使用该方法跳转，是有返回按钮的，说明当前页面是跳转前页面的子页面

	是父子关系页面的跳转

	调用onHide钩子，页面隐藏


#. wx.redirectTo()

	wx.redirectTo({
      url: '/pages/posts/post',
      success: function(){
        console.log('redirect--success');
      },
      fail: function () {
        console.log('redirect--fail');
      },
      complete: function () {
        console.log('redirect--complete');
      }
    })

	关闭当前页面，跳转到应用内的某个页面，没有返回键

	是平级之间的跳转

	调用onUnload钩子,页面卸载

	应用场景： 首页中的 "开启应用" 按钮点击后，正式跳转到应用首页

	运行顺序是：		redirect--success > redirect--complete > 启动页：onunload


#. 冒泡事件的应用场景

	1. 不好的应用：

		点击div隐藏另一个div，点击空白页，显示div

		如果不阻止事件冒泡，红色div永远不会显示，因为总会冒泡到document上，

		var blue = document.getElementById('blue');
		var red = document.getElementById('red');

		blue.onclick = function(e){
			e.stopPropagation();
			red.style.display = 'block';
		};

		document.addEventListener('click', function(){		// 阻止事件冒泡
			red.style.display = 'none';
		}, true);

	2. 优点： 事件委托（事件代理）

		可以提高很大的性能

			<ul id="ul">
				<li>1</li>
				<li>2</li>
				<li>3</li>
				<li>4</li>
				<li>5</li>
			</ul>

			a. 不好的写法：

				每个li上绑定一个click事件

			b. 在ul上绑定事件

				ul.onclick = function(ev){
					var e = ev || window.ev;				// 获取event对象
					var target = e.target || e.srcElement;	// 获取触发事件的目标对象
					target.style.color = 'red';	// 主流
				};


	2. 阻止事件冒泡

		event.stopPropagation();	// 主流

		window.event.cancelBubble = true;	// IE，注意是window.event

		封装：

			function stopBubble(e){
				if( e && e.stopPropagation){
					e.stopPropagation();
				}else{
					window.e.cancelBubble = true;
				}
			}

#. 格式化代码
	
	alt + shift + F

#. template

	定义template代码片段

		<template name='postItem'>
			<txt>{{item.title}}</text>	// 如果data='{{item}}'
			<txt>{{title}}</text>	    // 如果data='{{...item}}'
		</template>

	使用：

		WXML:

			<import src='../../template/post-item-template.wxml' />

			<template is='postItem' data='{{item}}'></template>

		WXSS：

			@import './post-item/post-item-template.wxss';

	注意：

		使用时，import导入需要的模板文件，必须加/封闭import标签，否则报错

		template中的is属性对应定义好的代码片段中的name属性值

		data属性是将template需要的数据传递给代码片段

		template内如果有image,最好使用绝对路径，因为你不知道该模板会用到哪里

		如果模板上传递的data直接是一个对象(data='{{item}}')，而不是用rest操作符展开的对象(data='{{...item}}'),那么在模板上获取传递过去的数据时，还是用item.title获取，因为在实际的渲染中，template内的代码是要替换到占位符的地方，

	模板中的事件：

		movie-list-tpl.wxml:

			<view bindtap='moreMovie'>
	          <text class='movie-list-more'>更多</text>
	          <image src='/images/icons/arrow-right.png'></image>
	        </view>		

		movie-list-tpl.js:

			var movieListTplEvents = {
			  // 更多电影
			  moreMovie: function (event) {
			    wx.navigateTo({
			      url: "/pages/movies/more-movie/more-movie"
			    })
			  }
			};
			//导出，供外部使用
			export default movieListTplEvents	        

		movie.wxml:

			<view catchtap='test'>	// 这里也定义一个方法
			    <template is='movie-list' data='{{...inTheaters}}'></template>
			</view>

		movie.js:			

			import movieListTplEvents from '../../template/movie-list/movie-list-tpl.js';

			test: function(event){
			    console.log('有没有把tpl.js引进来', movieListTplEvents);
			    movieListTplEvents.moreMovie(event);
			}

#. wx.getStorage

	同步： wx.getStorageSync('hello');

	异步： wx.getStorage({
			key: 'hello',
			success: function(data){

			}
		  });		

#. flex模型

	1. 元素是垂直布局，并且左右居中：

		.container{
			display: flex;
			flex-direction: column;
			align-items: center;
		}	

#. babel index.js
	
	运行该命令，会将index.js中es6语法转化对应的es5语法输出

	如： 

		[1,2,3].map(el => el+1);

		转化后：

		[1,2,3].map(function(el){
			return el+1;
		});

	如运行该命令报错，可能是没有安装 npm install --save-dev babel-cli

#. source map	

	项目上线时，我们通常会对代码进行压缩打包以减少体积，从而有效提高访问速度。然而压缩代码的报错信息是很难debug的，因为他的行号和列号已经失真，这个时候我们就需要sourcemap来还原真实的出错位置。

	各种前端主流任务管理工具，打包工具都支持生成source map

	source map是一个json文件，包含代码转换前后的位置信息

#. 时刻注意用this.setData去更新值

#. 豆瓣api
	
	api/douban.com/v2/movie/subject/26683290

	地址栏输入这个url可以获取接口信息

	id: 26683290 可以自己搜索你的名字，然后从url中获取到这部电影的id

#. api rate limit

	速率限制，为防止滥用，应该考虑对API做限流。例如，可以限制每个用户10分钟内最多调用API 100次。如果在规定的时间内接收了一个用户大量的请求，将返回相应状态码429（这以为是过多的请求）

#. 4个新的HTTP状态码

	RFC 6585最近刚刚发布，该文档描述了4个新的http状态码。http协议一直在演变，新的状态码对于开发REST 服务或者说基于http的服务非常有用

	428 要求先决条件

	429 too many requests(太多请求)

	431 请求头字段太大

	511 要求网络认证

#. no-referrer-when-downgrade

	仅当发生协议降级（如：https页面引入http资源，从https页面跳到http等）	时不发送Referrer信息。这个规则是现在大部分浏览器默认采用的。

	在页面引入图片，js等资源，或者从一个页面跳到另一个页面，都会产生新的http请求，浏览器一般都会给这些请求头加上表示来源的Referrer字段。该字段在分析用户来源时很有用

#. node转发豆瓣api，解决403问题
	
	搭建node服务器

	npm init -y (新建默认的package.json)

	npm install --save express request 模块

	新建 server.js

		var express = require("express");
		var app = express();
		var request = require('request');

		app.get("/*", (req, res, next)=> {
		    request('https://api.douban.com' + req.url, function(error, response, body) {
		        res.send(body);
		    });
		})

		app.listen(3000);

	运行node服务器

		node server.js

	本地的请求地址为：

		http://localhost:3000/v2/movie/top250				


#. 豆瓣返回的错误信息
	
	{
		code:112,
		msg: 'rate_limit_exceeded2: 116.226.3.152'
		request: 'GET /v2/movie/in_theaters'
	}

	IP 访问速度限制

#. promise.all实际应用
	
	// 获取电影数据
  	getMovieListData: function (resolve,doubanBaseUrl, url){
  	  var self = this;
  	  wx.request({
	      url: doubanBaseUrl + url +'?start=0&count=3&city=上海',
	      method: 'GET',
	      header: { 'content-type': 'application/json' },
	      success: function(res){
	        // console.log('成功回调',res);
	        

	        resolve(res);
	      },
	      fail: function(error){
	        console.log(error);
	      }
  	  });
  	}
	
	// 正在热映
	var inTheatersPromise = new Promise((resolve,reject) => {
      return this.getMovieListData(resolve,doubanBaseUrl, inTheatersUrl);
    });

    // 即将上映
    var comingSoonPromise = new Promise((resolve, reject) => {
      return this.getMovieListData(resolve, doubanBaseUrl, comingSoonsUrl);
    });

    // top250
    var top250Promise = new Promise((resolve, reject) => {
      return this.getMovieListData(resolve, doubanBaseUrl, top250Url);
    });

    Promise.all([inTheatersPromise, comingSoonPromise, top250Promise])
      .then(data => {
        data.forEach(el => {
          var movieData = el.data.subjects;
          var result = movieData.filter(el => {
            if(el.title.length >= 7){
              el.title = el.title.substring(0,7) + '...';
            }
            return el;
          });
        })
        this.setData({
          inTheaters: data[0].data.subjects,
          comingSoon: data[1].data.subjects,
          top250: data[2].data.subjects
        });
      })
      .catch(error => console.log('promise',error));

#. 动态设置导航条title

	在onReady钩子中设置，不能再onLoad中，onLoad中不能操作UI相关，因为这个时候页面还没渲染完毕

#. 0/0 = NaN	
   1/0 = Infinity
   -1/0 = -Infinity

   总结： 任何数值除以0都会导致错误而终止程序执行。但是在js中，会返回特殊的值，因此不会影响程序的执行。

   比0大的数除以0，则会得到无穷大

#. 上下左右居中
	
	HTML: 
			<div class="box">
				<span>
					<a>a</a>
					<a>b</a>
				</span>
			</div>

	CSS:
		1. position + trnasfrom

			.box{
				width: 200px;
				height: 200px;
				border:1px solid #ccc;
				position: relative;
			}
			span{
				background: pink;
				position: absolute;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);		// 关键（之前都是负margin）
			}

		2. flex

			.box{
				width: 200px;
				height: 200px;
				border:1px solid #ccc;
				display: flex;
				align-items: center;
				justify-content: center;
			}
			span{
				background: pink;
			}


#. 附件上传的安全过滤问题

#. 现在浏览器支持使用两种不同的API发起http请求：

	XMLHttpRequest接口 和 fetch() API

#. 强制类型转换为boolean类型

	!!()

	!!('hello') // true
	!!(null)    // false


#. flex-grow 和 flex-shrink

	是flex中两个重要的属性，

	flex-grow: 0 | 1;

	定义了item的width不能够把box填充满时，自动计算width填充满box

	.box {
		width: 1000px;
	}

	.item {
		width: 200px;
	}

	div.box
		div.item
		div.item

	这时，box还剩下600px没有填满，

	.item {
		width: 200px;
		flex-grow: 1;	// 这时候虽然定义了item的width是200，但是实际是width:500px;
	}

	div.box
		div.item
		div.item
		div.item
		div.item
		div.item
		div.item

	.item {
		width: 200px;
		flex-shrink: 1;	// 默认值，等比例缩小（=0，该item不缩小，）
	}
	
#. Object.is()
	
	效果类似于 === 但是全等有一个缺点就是, NaN与自身不相等

	Object.is({}, {})   	//  false
	Object.is(NaN, NaN)   	//  true
	Object.is(111, '111')   //  false

	console.log(+0);    // 0
    console.log(-0);    // -0
    console.log(-0 === +0);     // true
    console.log(Object.is(+0, -0));  // fasle
	
#. Object.assign(target, source)	

	是浅拷贝，即拷贝的是对象的引用，改变source，target也会改变

	Object.assign([1,2,3], [4,5]);	// [4, 5, 3]

	把数组视为属性名为0, 1, 2的独享，因此原数组的0号属性4覆盖了目标数组的0号属性1

	2. 可以简化原型方法

		class Point {
			constructor(x, y) {
				// Object.assign(this, {x, y});
			}
		}

		Object.assign(Point.prototype, {
			run() { return "跑"; },
			say() { return "说"; }
		})

		let p1 = new Point(12, 23);
		console.log(p1);
		console.log(p1.run());
		console.log(p1.say());

		总结: Object.assign就相当于下面一段代码

			Point.prototype.run = function () {
				return "跑";
			};

			Point.prototype.say = function () {
				return "说";
			};

#. 查看端口占用情况，及杀死进程

	查看端口占用情况: netstat -nao | findstr "9229"

	强制杀死进程:  taskkill /pid 8480 -t -f

	mac：		lsof -i tcp:9229 （如果端口号未被占用，则什么都不会输出）

#. ngFor 在每一行遍历出两个不同的值

	<div *ngFor="let item of myArray; let i = index; let even = even;">
		<span *ngIf="even">{{ myArray[i] }} {{ myArray[i+1] }}</span>
	</div>

	myArray = [0, 1, 2, 3, 4, 5, 6, 7]

	result:   如果不加 *ngIf="even" ，显示结果如下
				0 1
				1 2
				2 3
				3 4
				4 5
				5 6
				6 7
				7

				正常：
				0 1
				2 3
				4 5
				6 7

#. 错误集锦

	TypeError: this.validator is not a function

	code:

		var valueFromApi = [
			{name: "apple", id: [12, 23, 34]},
			{name: "join", id: [12]},
			{name: "mike", id: [34]},
			{name: "lily", id: [23, 34]}
		];

		fb.group(valueFromApi);

		这个时候会报错，因为id是个数组，但是在initForm的时候，是不可能有form control的值时array的，

		解决方法是:

			fb.group({items: [[1, 2, 3, 4]]})

		即，在数组外面再套一层数组

		you have to wrap everything into an array, otherwise angular thinks that [1, 2, 3, 4] is a form control definition rather than a form control value

#. 马甲包

	马甲包和主产品包拥有同样的内容和功能，除了icon和应用名称不能完全一致，其他基本一致

#. aync await

	函数前面多了一个aync关键字。await关键字只能用在aync定义的函数内。

	aync函数会隐式地返回一个promise，该promise的resolve值就是函数return的值

	返回值是Promise

	eg:
	
		const makeRequest = aync () => {
			try {
				const data = JSON.parse(await getJson);
				console.log(data);
			} catch (err) {
				console.log(err);
			}
		}

#. Generator 函数

	Generator函数是一个状态机，封装了多个内部状态，

	执行该函数，会返回一个遍历器对象，也就是说，Generator函数除了状态机，还是一个遍历器对象生成函数。

	返回的遍历器对象，可疑一次遍历该函数内部的每一个状态。

	` 特征：

		function关键字与函数名之间有一个星号；

		函数体内部使用 yield 表达式，定义不同的内部状态

		function* testGenerator() {
			yield "hello";
			yield "world";
			return "ending";
		}

		const result = testGenerator();
		console.log(result);	// testGenerator{<suspended>}

		const first = result.next();
		const two = result.next();
		const three = result.next();
		const four = result.next();
		
		console.log("first", first);    // {value: "hello", end: false}
		console.log("two", two);        // {value: "world", end: false}
		console.log("three", three);    // {value: "ending", end: true}
		console.log("four", four);      // {value: undefined, end: true}

		解读：

			上面代码定义了一个Generator函数，它内部有两个yield表达式（hello,world），即该函数有三个状态：hello,world和return语句。

			Generator函数的调用访问与普通函数一样，但是，调用该函数后，该函数并不执行，返回的也不是函数运行结果，

			而是一个纸箱内部状态的指针对象（也就是遍历器对象 Iterator Object）

			下一步，必须调用遍历器对象的next方法,使得指针移向下一个状态,也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，

			直到遇到下一个yield表达式或return语句为止。换言之,Generator函数是分段执行的，yield表达式是暂停执行的标记,

			而next方法可以恢复执行。

	` yield 表达式

		1. Generator函数可以不用yield表达式,这时就变成了一个单纯的暂缓执行函数

				function* noYield() {
					console.log("no yield");
				}

				setTimeout(() => {
					noYield().next();
				}, 100);

		2. yield 表达式只能用在 Generator 函数内,用在其他地方都会报错

			(function () {
				yield 1;	// 语法错误
			});

			var arr = [1, [[2, 3], 4], [5, 6]];

			var flat = function* (a) {
				a.forEach(item => {	
					if (typeof item !== 'number') {
						yield* flat(item);
					} else {
						yield item;
					}
				});
			};

			for (var f of flat(arr)){
				console.log(f);
			}

			报错, 因为forEach方法的参数是一个普通函数,但是在里面使用了yield表达式
			解决方法就是, 改用for循环

			var flat = function* (a) {
				var length = a.length;
				for (var i = 0; i < length; i++) {
					var item = a[i];
					if (typeof item !== 'number') {
						yield* flat(item);
					} else {
						yield item;
					}
				}
			};

		3. yield 表达式如果用在另一个表达式之中, 必须放在圆括号内

			function* demo() {
				console.log("hello" + yield 12);
				console.log("hello" + yield);
			}

			报错, 因为 yield在一个表达式中, 所以必须用圆括号包起来

			注意, console.log("hello" + yield 12);  // undefined

			因为, yield表达式本身没有返回值,或者说总是返回undefiend

			function* demo() {
				console.log("hello" + (yield 12));
				console.log("hello" + (yield));
			}

		4. next() 方法的参数

			next方法可以带一个参数,改参数就会被当做上一个yield表达式的返回值

			function* input() {
				const input = yield 23;
				console.log(input);
			}

			const result = input();

			input().next("传递一个参数");	// {value: 23, done: false}	传递一个参数

			注意：

				如果没有将函数调用赋值给一个变量,而是每次都直接调用 Generator 方法,最后的额输出结果是不一样的

				1. 赋值给变量

					const result = input();
					console.log(result.next()); // 注意,第一次调用时,next方法都不用传递参数,即使传递也没用,可以理解为第一个next方法用来启动遍历器对象，所以不用带有参数。
					console.log(result.next("传递一个参数"));

				2. 不赋值给变量

					console.log(result.next());
					console.log(result.next("传递一个参数"));

					input的值并不会输出为 "传递一个参数", 因为每次都调用 Generator 函数本身, 都相当于第一次调用,不管调用了多少次, 都只会输出第一次next的结果,指针并不会往下走

		5. 向 Generator 内部输入值

			function* demo(){
				console.log(`start`);
				console.log(`1. ${yield}`);
				console.log(`2. ${yield}`);
				return `ending`;
			}

			let result = demo();

			console.log(result.next());		// start {value: undefined, end: false}
			console.log(result.next('a'));	// 1. a  {value: undefined, end: false}
			console.log(result.next('b'));	// 2. b  {value: 'ending', end: false} 
			console.log(result.next());		// ending {value: undefined, end: false}

		6. yield* 表达式

			用来在一个 Generator 函数里面执行另一个 Generator 函数

#. 面试题 关于Generator

	考察知识点的熟悉，是不是有误区

	let arr = [1, [[2, 3], 4], [5, 6]];

	var flat = function* (arr) {
		arr.forEach(item => {
			if (typeof item === "number") {
				yield* item;
			} else {
				yield item;
			}
		});
	};

	console.log(flat());

	问, 输出结果是什么？

	答, 语法错误,报错,因为forEach方法的参数是一个普通函数,但是在里面使用了 yield 表达式只能用在* 函数内部。

	改进: 改用for循环

		var flat = function* (arr) {
			const len = arr.length;
			for(var i=0; i<len; i++) {
				var item = arr[i];
				console.log("item", item);
				if (typeof item !== "number") {
					yield* flat(item);
				} else {
					yield item;
				}
			}
		};


#. 斐波那契数列

	指的是这样一个数列: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377……

	这个数列从第三项开始, 每一项都等于前两项之和

	递推公式: F(n) = F(n-1) + F(n-2)

黄金比例:

	0.618

	又称黄金分割, 是指将整体一分为二,较大部分与整体部分的比值等于较小部分与较大部分的比值,其比值约为0.618
	

#. base64

	末尾有两个==就是base64编码过的

#. 复制功能

	1. To copy Text from Textbox 
	copyInputMessage(inputElement){
		inputElement.select();
		document.execCommand('copy');
		inputElement.setSelectionRange(0, 0);
	}

	2. To copy any Text 
	copyText(val: string){
	let selBox = document.createElement('textarea');
		selBox.style.position = 'fixed';
		selBox.style.left = '0';
		selBox.style.top = '0';
		selBox.style.opacity = '0';
		selBox.value = val;
		document.body.appendChild(selBox);
		selBox.focus();
		selBox.select();
		document.execCommand('copy');
		document.body.removeChild(selBox);
	}

	HTML:

		<div>
		<h2>Copy to Clipboard</h2>
		<p>Example 1</p>
		<input type="text" value="Enter text to be copied" #userinput>
		<button (click)="copyInputMessage(userinput)" value="click to copy" >Copy from Textbox</button>
		</div>
		<br/>
		<p>Example 2</p>
		<div>
		<button (click)="copyText('Copying any text passed here')" value="click to copy" >Copy any Text</button>
		</div>

	总结:

		input标签如果是disabled的，这时候复制不了任何内容，即复制的是空的，但是readOnly属性是可以复制成功的！		

#. map的新用法

	const phones = [
		{ label: 'mobile', value: '111111', duration: '22' },
		{ label: 'mobile', value: '22222', duration: '33' },
		{ label: 'mobile', value: '333333333', duration: '44' },
		{ label: 'mobile', value: '4444444444', duration: '55' },
		{ label: 'mobile', value: '555555555', duration: '66' }
	];

	普通用法:	
	
		1. 形参一般写为 el
		
			phones.map( el => console.log(el.label));

		2. return 返回值问题

			phones.map( el => {
				return {
					phone: el.value,
					phoneLabel: el.label,
					name: 'apple',
					origin: 'hahaha'
				};
			});

	新用法:		
	
		1. 形参写为 
		
			phones.map( ({ label, value }) => console.log(label));

			PS: reduce的实参也有一个新写法

				获取总共的通话时长

				一般写法: phones.reduce( (prev, cur) => prev + +cur.duration, 0);

				新写法:   phones.reduce( (prev, { duration }) => prev + +duration, 0);

		2. return 返回值问题

			phones.map( el =>
				({
					phone: el.value,
					phoneLabel: el.label,
					name: 'apple',
					origin: 'hahaha'
				})
			});

		3. 多个return问题

            function test() {
                if (true) {
                    return 1;
                }
                return 2;
            }
            test();     // 1

        4. 优化写法（实现重复元素的计数）

            const items = [1, 2, 2, 2, 3, 4, 4, 5, 5];

            const countNums = items.reduce( (prev, cur) => {
                if (prev[cur]) {
                    prev[cur] = prev[cur] + 1;
                } else {
                    prev[cur] = 1;
                }
                return prev;
            }, {});

            if-else可以有更优化写法:

                const countNums = items.reduce( (prev, cur) => {
                    prev[cur] = (prev[cur] || 0) + 1;
                    return prev;
                }, {});

        5. 对象的写法

            Normal:

                const obj = {
                    say: function() {
                        return "say";
                    }
                };

            Special:

                const obj = {
                    say() {
                        return "say";
                    }
                }

        6. key-value重复的，在对象中可以只写一个

            const age = 10;

            const person = {
                name: "join",
                age,                    // 普通写法是 age:age,重复的key-value,只用写一个
                run() { return }
            };

            function getPoint() {
                const x = 10;
                const y = "apple";
                return {x, y};
            }
            getPoint();     // {x: 10, y: "apple"}

        7. 对象的key

            const age = "age";

            const obj = {
                name: "join",
                [age]: 12,
                ["aa bb"]: 10
            };

            obj[age];   // 12
            obj["aa bb"];   // 10

        
#. 获取数组元素

	const arr = [
        {
            phone: 15039217672,
            phoneLabel: "mobile",
            name: "apple",
            origin: "self"
        }
    ];

	const [first] = arr;

	// first就是数组元素，即对象

	// 正常的写法是:  const first = arr[0];

#. 将对象转化为 查询参数字符串

    Target:

        const query = {
            name: 'join',
            age: 12,
            sex: 'man',
            phone: ''
        };

    Result:

        ?name=join&age=12&sex=man
    
    ================

    const search = Object.keys(query)
        .filter(prop => !!query[prop])
        .map(prop => `${prop}=${encodeURIComponent(query[prop])}`)
        .join('&);

    const url = '192.168.2.1:4200';

    const result = [url, search].join('?');

#. encodeURIComponent 和 encodeURI

    encodeURI() 不会对本身属于URI的特殊字符进行编码。只会对空格编码(%20) 

    encodeURIComponent() 使用的比上面的方法多，因为在实践中更常见的是对查询字符串参数而不是对基础URL进行编码，

        会对所有非字母数字字符编码


#. 将 BLOB 数据转化成 TEXT

	API 返回的数据类型不是看这个类型像什么来判断的，比如netword中返回一个string, eg. 8f313846-e611-4d13-995b-5c31872f2d82d

	在RXJS中一直订阅不到,虽然返回看起来像string, 但这是认知上的错误, 返回类型应该看 response Headers中的content-type

	2. 我们一般用API返回的blob数据都是转化成URL用，现在要直接获取到这个blob内容

	Response Headers：

		HTTP/1.1 200 OK
		Accept-Ranges: bytes
		set-cookie: JSESSIONID=AA9200590E32538BAB02844A5C3D27AD; Path=/cybertron; HttpOnly
		x-application-context: cybertron:9056
		content-type: multipart/form-data;charset=UTF-8								// 应该看这里, 这就说明api返回的是BLOB类型
		content-length: 36
		date: Mon, 28 Jan 2019 02:56:23 GMT
		connection: close

	Request Headers:

		POST /cybertron-api/blobData/upload HTTP/1.1
		Host: localhost:4200
		Connection: keep-alive
		Content-Length: 778021
		Pragma: no-cache
		Cache-Control: no-cache
		Accept: application/json, */*
		Origin: http://localhost:4200
		Accept-Language: zh-CN
		User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
		Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryadvRiENVgHtPn7aX
		Referer: http://localhost:4200/data/source/list
		Accept-Encoding: gzip, deflate, br

	总结:

		cybertron-api.constant.ts

			static uploadBlobData(file: File): RequestParams {
				return {
					uri: `${BASE}/blobData/upload`,
					method: RequestMethod.Post,
					contentType: "File",							// 设置 requestHeaders中的content-type
					responseType: ResponseContentType.Blob,			// 设置 responseHeaders中的content-type
					body: { file }
				};
			}

		cybertron.service.ts

			uploadBlobData(file: File): Observable<Blob> {
				return this.rest.queryRestApi(CybertronApi.uploadBlobData(file)).pipe(map(resp => resp.blob()));
			}

		test.component.ts

			onFileChange(files: FileList): void {
				const file = files && files.item(0);

				if (file) {
					this.cybertronService
						.uploadBlobData(file)
						.subscribe(src => {

							const reader = new FileReader();
							reader.readAsText(src);		// Start reading the blob as text.

							reader.addEventListener('loadend', (e) => {
								console.log(reader.result);			// 这里已经将 blob 转化成 text 了
							});
						});
				}
			}

		HTML：

			<input #fileInput type="file" style="display: none" (change)="onFileChange(col.dictFieldNameWithRole, fileInput.files)" accept=".png,.jpg,.jpeg">
			<mat-form-field class="w-100">
				<input matInput nz-tooltip (click)="fileInput.click()" [nzTitle]="col.dictFieldNameWithRole" [placeholder]="col.dictFieldDescription || col.name" [formControlName]="col.dictFieldNameWithRole">
			</mat-form-field>


#. JS中的二进制数据

	常见的在网页中获取二进制数据有三种: File、Blob、XMLHttpRequest2

#. Blob对象

	Blob与ArrayBuffer的区别就是除了原始字节外，blob还提供了mine type作为元数据

#. FileReader对象

	该对象就是专门操作二进制数据的，主要用于将文件内容读入内存，通过一系列一部接口，可以在主线程中访问本地文件。

	fileReader将Blob读取为更为实用的数据类型去使用

	参数src是File对象或Blob对象

		reader.readAsText(src); 	// 结果用字符串表示

		reader.readAsDataURL(src);	// 结果用url(即 Bse64格式的字符串data:url)

		reader.readAsArrayBuffer(src);	// 结果用ArrayBuffer对象表示

	格式:

		var reader = new FileReader();
		reader.readAsDataURL(file);
		reader.onload = function(){
			console.log(reader.result);		//读取完毕后输出结果
		}

#. find方法

	find方法不会对空数组进行检测

	找不到方法返回 undefined

#. gem 和 npm 和 brew

	npm 是 node的包管理器

	gem 是 Ruby模块（叫做Gems）的包管理器，用于ruby软件包的下载安装使用。 ruby的软件包被称为gem

	brew 是 Homebrew的简称，是 MAC OSX上的软件包管理工具，能在mac中方便的安装或卸载软件，相当于 linux的yum， apt-get等软件管理工具

#. block元素水平居中

	mx-auto
	
	为什么 margin: 0 auto;会实现块级元素的居中

	包含块的宽度 = 元素本身width + margin-left + margin-right + padding-left + padding-right + border-width;

	如果一个div，定宽，并且设置了 margin-left:auto; 那么就可以实现块右对齐的情况，

	因为： 在包含快的宽度中，只有width和margin-left是有值得，其他都为0，所以相减就得到margin-left实际的width其实就是包含块宽度减去div本身的width

#. 函数中的 side effects

	https://blog.csdn.net/ustcyy91/article/details/80374401

#. mac 共享的wifi老是密码连接错误

	输入的密码明明正确的，但是老是提示密码错误

	原因：蓝牙和普通wifi都是走的 2.4 GHz 的频道，当你电脑上插了 USB 3.0的设备，转接口，干扰了2.4 GHz的wifi信号，

				但不会干扰 5.0 GHz 的wifi信号。 这也是为什么在插上 USB 3.0 设备后，你的蓝牙连接也不太稳定的原因，比如蓝牙鼠标飘忽不定、AirPods 声音有时会断断续续，罪魁祸首都是这个。


#. 浏览器UA

	user-agent

#. package.json中添加 browserlist 属性

	"browserlist":[
     ">=1%",
     "last 2 versions"
   ],

#. 当前页面停留3秒后跳转到新页面

	<meta http-equiv="Refresh" content="5;url=http://baidu.com" />

	效果就等同于：

		setTimeout(() => {
			window.location.href = 'http://baidu.com';
		}, 5000);

#.	npm 脚本

	1. 定义在package.json里面的脚本，就称为 npm 脚本

	2. npm run: 查看当前项目的所有 npm 脚本命令

	3. "test": "mocha test"	
	
		 这个脚本就等于 

		 "test": "./node_modules/.bin/mocha test"

	4. 通配符

		由于npm脚本就是Shell脚本，因此可以使用Shell通配符

		"lint": "jshint *.js"
		"lint": "jshint **/*.js"

		上面代码中，*表示任意文件名，**表示任意一层子目录。

	5. 执行顺序

		如果是并行执行（即同时的平行执行），可以使用&符号。

		如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用&&符号。

		可以用下面例子试验：

			scripts: {
				"a": "echo I run before the cy script",
				"cy": "echo im cy",
				"b": "echo I run after the cy script",
				"c": "npm run a && npm run cy && npm run b"
			}

#. Shadow DOM

	1. Element.attachShadow 给指定的元素挂载一个 Shadow DOM,返回值是 ShadowRoot

	2. mode 为true时，可以用js获取到 ShadowRoot

	3. Shadow boundary 影子边界，存在于shadow host 和 shadow root之间。
	
		影子边界保证主DOM写的css选择器和JS代码都不会影响到shadow dom, 当然也保护主文档不受 shadow DOM 样式的侵袭。

    3. 代码实现

        html:

            <span class='shadow-host age' padding>
                <!-- 这个是后备标签的意思，当浏览器不支持shadow dom 的时候，显示这个？ -->
                <!-- 不是所有的标签都可以作为 shadow-host, a标签就不可以 -->
                <a href="https://twitter.com/ireaderinokun">Follow @ireaderinokun </a>
            </span>

        JS:

            const shadowEl = document.querySelector('.shadow-host');
            const shadow = shadowEl.attachShadow({ mode: 'open' });
            
            const link = document.createElement('a');           // 创建Shadom dom的中内容
            link.href = shadowEl.querySelector('a').href;
            link.innerHTML = `
                <span aria-label="Twitter icon"></span>
                <i>ehehehhehe</i>
                ${shadowEl.querySelector("a").textContent}
            `;

            shadow.appendChild(link);

            const styles = document.createElement("style");     // Shadom dom的中样式
            styles.textContent = `
                :host-context(.age) i {                         // 当shadom host（这里是<span class='shadow-host age' padding>）本身或者它的父元素有 age 这个类时 shadow dom中的i元素应用的样式
                    font-size: 30px;
                }

                :host([padding]) {                              // 去shadom host本身上找，<span padding></span> 所以这里是 :host([padding]); <span class='padding'></span>就应该是 :host(.padding) 不加引号
                    padding: 0 20px;
                    display: inline-block;
                }

                a, span {
                    vertical-align: top;
                    display: inline-block;
                    box-sizing: border-box;
                }

                a {
                    height: 20px;
                    padding: 1px 8px 1px 6px;
                    background-color: #1b95e0;
                    color: #fff;
                    border-radius: 3px;
                    font-weight: 500;
                    font-family:'Helvetica Neue', Arial, sans-serif;
                    line-height: 18px;
                    text-decoration: none;   
                }

                a:hover {  background-color: #0c7abf; }

                span {
                    position: relative;
                    top: 2px;
                    width: 14px;
                    height: 14px;
                    margin-right: 3px;
                    background: transparent 0 0 no-repeat;
                    background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2072%2072%22%3E%3Cpath%20fill%3D%22none%22%20d%3D%22M0%200h72v72H0z%22%2F%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23fff%22%20d%3D%22M68.812%2015.14c-2.348%201.04-4.87%201.744-7.52%202.06%202.704-1.62%204.78-4.186%205.757-7.243-2.53%201.5-5.33%202.592-8.314%203.176C56.35%2010.59%2052.948%209%2049.182%209c-7.23%200-13.092%205.86-13.092%2013.093%200%201.026.118%202.02.338%202.98C25.543%2024.527%2015.9%2019.318%209.44%2011.396c-1.125%201.936-1.77%204.184-1.77%206.58%200%204.543%202.312%208.552%205.824%2010.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163%200%206.345%204.513%2011.638%2010.504%2012.84-1.1.298-2.256.457-3.45.457-.845%200-1.666-.078-2.464-.23%201.667%205.2%206.5%208.985%2012.23%209.09-4.482%203.51-10.13%205.605-16.26%205.605-1.055%200-2.096-.06-3.122-.184%205.794%203.717%2012.676%205.882%2020.067%205.882%2024.083%200%2037.25-19.95%2037.25-37.25%200-.565-.013-1.133-.038-1.693%202.558-1.847%204.778-4.15%206.532-6.774z%22%2F%3E%3C%2Fsvg%3E);
                };
            `;

            shadow.appendChild(styles);

    4. 用template元素优化上面代码

        html:

            <span class='shadow-host age' padding>
                <a href="https://twitter.com/ireaderinokun">Follow @ireaderinokun </a>
            </span>

            <template id='shadow-twitter-button'>
                <a href="https://twitter.com/ireaderinokun">
                    <span aria-label="Twitter icon"></span>
                    Follow @ireaderinokun
                </a>

                <style>
                    :host-context(.age) i {
                        font-size: 30px;
                    }

                    :host([padding]) {
                        padding: 0 20px;
                        display: inline-block;
                    }

                    a,
                    span {
                        vertical-align: top;
                        display: inline-block;
                        box-sizing: border-box;
                    }

                    a {
                        height: 20px;
                        padding: 1px 8px 1px 6px;
                        background-color: #1b95e0;
                        color: #fff;
                        border-radius: 3px;
                        font-weight: 500;
                        font-family: 'Helvetica Neue', Arial, sans-serif;
                        line-height: 18px;
                        text-decoration: none;
                    }

                    a:hover {
                        background-color: #0c7abf;
                    }

                    span {
                        position: relative;
                        top: 2px;
                        width: 14px;
                        height: 14px;
                        margin-right: 3px;
                        background: transparent 0 0 no-repeat;
                        background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2072%2072%22%3E%3Cpath%20fill%3D%22none%22%20d%3D%22M0%200h72v72H0z%22%2F%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23fff%22%20d%3D%22M68.812%2015.14c-2.348%201.04-4.87%201.744-7.52%202.06%202.704-1.62%204.78-4.186%205.757-7.243-2.53%201.5-5.33%202.592-8.314%203.176C56.35%2010.59%2052.948%209%2049.182%209c-7.23%200-13.092%205.86-13.092%2013.093%200%201.026.118%202.02.338%202.98C25.543%2024.527%2015.9%2019.318%209.44%2011.396c-1.125%201.936-1.77%204.184-1.77%206.58%200%204.543%202.312%208.552%205.824%2010.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163%200%206.345%204.513%2011.638%2010.504%2012.84-1.1.298-2.256.457-3.45.457-.845%200-1.666-.078-2.464-.23%201.667%205.2%206.5%208.985%2012.23%209.09-4.482%203.51-10.13%205.605-16.26%205.605-1.055%200-2.096-.06-3.122-.184%205.794%203.717%2012.676%205.882%2020.067%205.882%2024.083%200%2037.25-19.95%2037.25-37.25%200-.565-.013-1.133-.038-1.693%202.558-1.847%204.778-4.15%206.532-6.774z%22%2F%3E%3C%2Fsvg%3E);
                    }

                    ;
                </style>
            </template>

        JS:

            const shadowEl = document.querySelector('.shadow-host');
            const shadow = shadowEl.attachShadow({ mode: 'open' });
            const template = document.getElementById('shadow-twitter-button');
            const templateContent = document.importNode(template.content, true);

            shadow.appendChild(templateContent);

        优点: 这个标签不会被渲染，包括标签下的img、style、script等都不会被加载或执行。

            可以在js中使用 getElementById 之类的方法得到 <template> 标签对应的节点，但是却无法直接访问到其内部的节点

            因为默认他们只是模板，在浏览中表现为 #document-fragment （即 文档片段），可以通过节点对象的content属性来访问

            到这个DocumentFragment 对象

            通过 document-fragment 对象，就可以访问到 template 内部的节点了，通过 document.importNode 方法，
            
            可以将 document-fragment 对象创建一份副本，然后可以使用一切 DOM 属性方法替换副本中的模版内容，
            
            最终将其插入到 DOM 或是 Shadow DOM 中。

#. template

	前身是：

		<script type="text/template">
		// ...
		</script>

	1. 复制template的内容

		document.importNode(template.content, true);

		a. importNode() 方法把一个节点从另一个文档复制到该文档以便应用。如果第二个值设置为true，那么还要复制该节点的所有子孙节点

		b. template.content 返回值是  #document-fragment ，可以理解为一个文档片段即另一个document

#. 正则匹配

	{} 一般用来表示匹配的长度。比如 \s{3} 表示匹配三个空格。 \s{1,3} 表示匹配一到三个空格

	const str = '1       456';
	const reg = /\s{3}/;			// false,只能有三个空格
	const reg = /\s{1,3}/;			// false,只能有一到三个空格
	const reg = /\s{1,}/;			// true,至少有一个空格
	console.log(reg.test(str));

#. .babelrc

	后缀rc来自linux，linux中有很多rc结尾的文件，比如 .bashrc，  rc是  run command的缩写，翻译成中文就是运行时的命令

	表示程序执行时就会来调用这个文件

#. X-Frame-Options	

	https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options

	用来给浏览器指示允许一个页面可否在 <frame>, <iframe>, <embed> 或者 <object> 中展现的标记。

#. tsconfig.json 配置编辑器编译ts文件，其中的target是将最终编译成的js代码到什么程度。

	babel是编译js文件的，
	
#. typeof 返回是字符串

	typeof 1;
	typeof 'hello';
	typeof true;
	typeof Symbol();

	typeof null;

	typeof undefined;
	
	typeof class C();
	typeof Math.sin;
	typeof new Function();