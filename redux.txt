    https://blog.csdn.net/railsbug/article/details/77915393

    https://www.jianshu.com/p/7df221bca332  TODO

    https://github.com/ivanderbu2/angular-redux   clone failed

    TODO-CY 

        withLatestFrom
    
        @Effect()
        loadTodos$: Observable<Action> = this.actions$
            .ofType(todoActions.ActionTypes.LOAD_TODOS)
            .map(toPayload)
            .withLatestFrom(this.store$.select('auth'))
            .switchMap(([_, auth]) => {
            return this.todoService.getTodos(auth.user.id);
            })
            .map(todos => new todoActions.LoadTodosSuccessAction(todos))



#. 概念

    Redux是为了解决应用状态（State）管理而提出的一种解决方案。什么是状态？简单来说对于应用开发来讲，UI上显示的数据、控件状态、登录状态等全部可以看做状态

    我们在开发中经常会碰到，这个界面的按钮需要在某种情况下变灰；那个界面上需要根据不同情况显示不同数量的Tab；这个界面的某个值的设定会影响另一个界面的某种展现等等。应该说应用开发中最复杂的部分就在于这些状态的管理。很多项目随着需求的迭代，代码规模逐渐扩大、团队人员水平参差不齐就会遇到各种状态管理极其混乱，导致代码的可维护性和扩展性降低。

    Reducer
    
    Action
    
    Store   可以看成是一个数据库。store是一个你应用内的数据（状态）中心。它在redux中有一个基本原则：它是一个唯一的，

            状态不可修改的树。状态的更新之后通过显性定义的Action发送后触发，它提供了Store.select()和Store.dispatch()来与reducer协同工作。Store.select()用于选择一个selector，Store.dispatch()用于向reducer分发action的类型。

            store.dispatch(action)   action一般为 new xxx();
    
    createSelector  它创建一个selector用于生成一个指定的状态

#. @Effect装饰器

    https://blog.csdn.net/mjr99999/article/details/78609599

    它来帮助我们检查 store 发出的 Action，将特定类型的 Action 过滤出来进行处理。

    当发现特定的 Action 发出之后，自动执行某些异步操作(比如执行异步请求回调)，然后将处理的结果重新发送回 store 中。

    @Effect()
    login = this.action$.pipe(
        ofType('LOGIN'),    // ofType（Action）监听的是action,只要其他地方dispatch 'LOGIN'，这边就会自动执行
        map(toPayload),     // 转换action的 payload 数据流，如果你本身数据格式就是payload格式就不用写
        switchMap(payload =>
            this.http.post('/auth', payload.username)
                .pipe(
                    map(res => ({ type: "LOGIN_SUCCESS", payload: res.json() }) )   // 重点，这里可以直接 dispatch，而不用显示的写dispatch，我们dispatch了LOGIN_SUCCESS，让整体state发生了变化
                )
        )
    )

#. ngrx = redux + rxjs    

#. 代码

    app.module.ts

        import { StoreModule } from "@ngrx/store";

        imports: [
            StoreModule.forRoot({ count: counterReducer }),
        ]

    counter.actions.ts

        方法一:

            export interface AppState {
                counter: number;
            }

            export enum ActionTypes {
                Increment: "[Counter Component] Increment",
                Dncrement: "[Counter Component] Dncrement",
                Reset: "[Counter Component] Reset"
            }

            export class Increment implements Action {
                readonly type = ActionTypes.Increment;
            }

            export class Dncrement implements Action {
                readonly type = ActionTypes.Dncrement;
            }

            export class Reset implements Action {
                readonly type = ActionTypes.Reset;
            }

            export class Reset implements Action {      // 如果有 payload 需要在constructor中实例化
                readonly type = "[Login Page] Login";

                constructor(public payload: { username: string; password: string }) {}
            }

            export type Actions = Increment | Decrement | Reset;    // 定义一个type类型,用在 reducer函数中

        方法三:(对应下面component的方法三)

            export const INCREMENT = 'INCREMENT';
            export const DECREMENT = 'DECREMENT';
            export const RESET = 'RESET';

    my-counter.component.html

        <button (click)="increment()">Increment</button>
        <div>Current Count: {{count$ |async}}</div>
        <button (click)="decrement()">Decrement</button>
        <button (click)="reset()">Reset Counter</button>

    my-counter.component.ts

        方法一：

            import * as counter from '../counter.actions';      // 将 counter.actions.ts 文件中的所有导出定义一个默认变量，使用的时: counter.xxx

            counter$: Observable<number>;

            constructor(private store: Store<counter.AppState>) {
                this.counter$ = store.select("count");
            }

            increment(): void {
                /**
                * 改变内部 state 唯一方法是 dispatch 一个 action
                */
                this.store.dispatch(new counter.Increment());
            }

            decrement(): void {
                this.store.dispatch(new counter.Decrement());
            }

            reset(): void {
                this.store.dispatch(new counter.Reset());
            }

            login(): void {
                this.store.dispatch(new counter.Login({username: "cyy", password: "qaz123*"}));
            }

        方法二：            

            import { AppState, Increment, Decrement, Reset, Login } from '../counter.actions';

            counter$: Observable<number>;

            constructor(private store: Store<AppState>) {
                this.counter$ = store.select("count");
            }

            increment(): void {
                this.store.dispatch(new Increment());   // 因为 import是把每个export都作为单独的变量导入进来的，而不是一个整体变量，所以 new Increment(), 而不是 new counter.Increment();
            }

            decrement(): void {
                this.store.dispatch(new Decrement());
            }

            reset(): void {
                this.store.dispatch(new Reset());
            }

            login(): void {
                this.store.dispatch(new Login({username: "cyy", password: "qaz123*"}));
            }

        方法三：            

            import { INCREMENT, DECREMENT, RESET } from '../counter.actions';

            counter$: Observable<number>;

            constructor(private store: Store<AppState>) {
                this.counter$ = store.select("count");
            }

            increment(): void {
                /**
                * this.store.dispatch(action) 而 action 的源码定义是: 
                *   interface Action {
                *     type: string
                *   }
                * 
                * 其实是有个 type属性必须实现的
                */
                this.store.dispatch({ type: INCREMENT }); 
            }

            decrement(): void {
                this.store.dispatch({ type: DECREMENT });
            }

            reset(): void {
                this.store.dispatch({ type: RESET });
            }

        counter.reducer.ts

            import { ActionTypes, Actions } from './counter.actions';

            export const initialState = 0;

            export function counterReducer(state = initialState, action: Actions) {
                switch (action.type) {
                    case ActionTypes.Increment:
                        return state + 1;
                    case ActionTypes.Decrement:
                        return state - 1;
                    case ActionTypes.Reset:
                        return 0;
                    default:
                        return state;
                }
            }

            /**
            * reducer
            * 形式为 (state,action) => state的纯函数
            * 描述了action如何把state转变成下一个state
            *
            * 你应该把要做到的修改改变成一个普通对象,这个对象被叫做action
            * 
            * 而不是直接修改state
            * 
            * 然后编写专门的函数来决定每个action如何改变应用的state,这个函数被叫做reducer
            */

