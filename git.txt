test

1. 新建分支并push 到远程分支

	git checkout -b webapp-cy  创建一个新分支 webapp-cy

	git branch		查看本地分支，以及当前分值

	git branch -r 	查看远程分支

	git push origin webapp-cy:webapp-cy		将本地分支webapp-cy push到远程分支webapp-cy上,
											如果远程分支没有webapp-cy，则自动创建该分支

		如果运行 git push origin a:b 这条命令出错时：

			error: dst ref refs/heads/A receives from more than one src. 

			error: failed to push some refs to 'git@github.com:ningyu/algos.git'

		可能的错误时，a:b 之间不要有空格，如：a :b a: b 都是错误的，


	新建的分支，每次提交，都要指明将本次代码提交到远程的哪个分支上:

	git push origin cy:webapp-cy

#. 查看远程分支

	git branch -a

		remotes/origin/develop

	切换到远程分支：

		git checkout remotes/origin/develop

2. 删除本地分支

	git branch -D xxx

3. 拉取分支代码

	git checkout -b cy (新建本地分支 cy 并切换到该分支)

	git reset --hard remotes/origin/webapp-cy  (将本地分支的指针指向远程仓库 remotes/origin/webapp-cy, 这样就拉取了远程分支的代码)

	将代码提交到远程分支：

		git ps origin 629:release/1.0

	更新远程分支的代码到本地分支：

		git pull origin release/1.0
		

4. 合并分支有冲突时，可以放弃合并

	git merge --abort

	执行完这个操作，原先文件中多出来的冲突表示符就会消失

5. 对比两个分支差异，加上 --stat 是显示文件列表, 否则是文件内容diff

	git diff branch1 branch2 --stat   (两个本地分支比较)

	dit diff cy origin/webapp-cy	   (本地分支和远程分支比较)

6. git merge

	git merge 既不是取交集，也不是取并集，而是文件更改历史重放所有的修改。

	比如这样的分支结构：

			   A----B----C
			  /
		D----E----F----G


	然后执行：

		git checkout master
		git merge topic

	那么 merge 的时候就是做了以下事情：

		首先找到它们共同的 commit E
		开始在 master 分支上从 A 到 C 重放所有修改


	如果 A 到 C 的过程中修改了 F 到 G 里面任何一个文件，那么就很可能会冲突，除非它们对同一个文件的修改完全一样。
	回到题主的问题。如果 B 删除了文件 foo，而 A 里面并没有任何提交跟 foo 相关，那么 foo 就会被删除；如果 A 里面修改了 foo，那么合并就会冲突，git 仓库会进入 MERGE 状态。你可以通过 git status 来看到具体状态是怎样。

7. 起别名：

	git config --global alias.ci commit

8. 创建git仓库有两种方法：

	git init

	git clone

9. gitignore 初次项目也是需要提交到远程的

10. 修改git commit 说明

	git ci -m '这是一个说明'

	如果这时候想修改这个commit的话，

	git ci --amend

	进入 vim 模式，i 开始写入，把之前的说明删掉重写 esc :wq 保存退出

11. 暂存区和工作区

	git ci -m '提交'

	这时候撤销 commit：

		git log  查看这次 commit 的上一次commit的id

		git reset --soft 7b141f25e1f8ae8583e246b1b0e697cf3952bbcd

		git st  发现上次提交的已经恢复到未暂存区了，

		git reset HEAD test.txt
		
		git st

		git ci -m '撤销commit成功'

		git ps


12. 

	git checkout dev

	git checkout release/3.2.0		就是在本地切换到该分支了，然后 git pull拉去最新代码

	git ch -b fix-bug		新建分支

	git ps 

	暂存区： git add 后的文件，都加入了暂存区

#. 修改完域密码后，每次git pull/push都要重新输入账号密码

	git config --global credential.helper store

	输完一次账号密码后，下次就不需要了

#. 修改本地分支名

	$ git branch -m test new

#. 合并多个commit为一个

	yang:sigrdrifa chenyangyang1$ git log --oneline

		249bec2 (HEAD -> ai, origin/shared-state) changes
		13e5680 add common state component
		d9aaeee shared state-result component								// 之上的三个都是我的分支上的三个commit，想将其合并成一个
		0648bc7 (origin/dev, origin/HEAD, dev) Fix build error				// 这个是 dev 上最新的一个commit
		387b32a Integration with ORC and identity check
		9a83584 Merge branch 'orderNo' into 'dev'

	1. reset

		git reset HEAD^

			出现下面的代码，表示,已经将 commit是changes这个的commit的代码，重新放回了本地的工作区

			Unstaged changes after reset:
			M       client/h5/src/app/page/products/product-list/product-list.component.html
			M       client/h5/src/app/page/products/product-list/product-list.component.ts
			M       client/h5/src/app/redux/reducers/order.reducer.ts
			M       client/h5/src/app/shared/component/result-state/result-state.component.html
			M       client/h5/src/app/shared/component/result-state/result-state.component.ts

		git log --oneline

			可以发现，只剩两个commit了，以此类推，再次执行 reset命令，会将三个commit所包含的代码都释放到本地工作区，然后再 git add . git ci -m 'xxxx' git ps 就好

			13e5680 (HEAD -> ai) add common state component
			d9aaeee shared state-result component
			0648bc7 (origin/dev, origin/HEAD, dev) Fix build error

		git reset HEAD^
		git reset HEAD^
		git st
		git add .
		git ci -m 'xxx'
		git ps origin local:remote -f 	(一定要加 -f)

#. 全局查看本机安装了多少个npm包

	npm ls -g -depth=0

#. git rev-parse HEAD

	获取最新的commit号

	git rev-parse --short HEAD