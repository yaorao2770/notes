express demo:   https://www.cnblogs.com/aaron-pan/p/9765707.html

建议先学Express。KOA是必须玩的，只是不急而已。

为什么koa必须玩呢?

因为这是潮流，es6标准啊，社区也活跃。另外还可以看一下这个：https://thinkjs.org/，有中文文档，更好学。



#. express使用

    npm i --save express

    npm list express            查看当前安装的express版本


    const express = require("express");
    const app = express();

    app.get("/", (req, res) =>{     

        res.json(
            { name: "apple", age： 12}          // res.json()返回给客户端json数据
        );      

        res.json("hello world");

        res.send("hello world");                // res.send() 传送http响应
                                                // send方法会根据内容自动帮我们是设置 Content-type头部和200状态码
                                                // res.status(400).send("i don`t have a cule!");
                                                // res.set("Cotnent-Type", "text/html");
    });

    var server = app.listen(8081, () =>{
        const host = server.address().address;
        const port = server.address().port;
        console.log(`应用监听在http://${host}${port}`);
    });

#. 另外需要安装的重要模块

    npm i --save cookie-parser  body-parser  multer

    body-parser: nodejs中间件,用于处理JSON,Raw,Text和URL编码的数据

    cookie-parser: 这是一个解析Cookie的工具.通过req.cookies可以去到传过来的cookie,并把它们转成对象

    multer:  nodejs中间件,用于处理 enctype="multipart/form-data"(设置表单的MIME编码)的表单数据

#.  请求方法

    app.get()
    app.post()
    app.put()
    app.delete()
    ....

#. request

    URL: http://localhost:8080/aa?name=apple 

    req.query();    // { name: "apple" }

#.  路由

    格式: app.get(path)  注意这个path一定要带/，不然匹配不到

    1. normal

        app.get("/", (res, req) => {
            res.send("主页请求");           // 注意这里是 send()而不是end(), end是node原生的发送http响应的方法
        });

        app.get("/personal", (res, req) => {
            res.send("个人信息请求");
        });

    2. route path 有参数

        1) localhost:8081/users/123/books/456

            app.get("/users/:userId/books/:bookId", (req, res) => {
                res.send(req.params);   {userId: 123, bookId: 456}
            });

        2) localhost:8081/flights/aaa-bbb

            app.get("/flights/from-:to", (req, res) => {
                res.send(req.params);   {from: "aaa", to: "bbb"}
            });

        2) localhost:8081/dot/shanghai.china

            app.get("/dot/from.:to", (req, res) => {
                res.send(req.params);   {from: "shanghai", to: "china"}
            });

    3. 正则匹配

        1) /ab*cd

            OK:      abbbbcd,  ab111cd,  abcd

            Error:   ab111d, abcd1122

            app.get("/ab*cd", (res, req) => {
                res.send("正则匹配path");
            });

        2) /ab?cd（acd, abcd）

        3) /ab+cd（abcd, abbbcd, abbbbcd）

        4) /.*fly$/（butterfly, dragonfly, but not butterflyman）
            
            注意, 这里是正则, 不用引号
            app.get(/.*fly$/, (req, res) => {
                console.log('正则匹配二');
                res.send("/.*fly$/");
            });

    4. 同一个path的不同请求

        app.route("/books)
            .get((req, res) => {
                res.send("book GET");
            })
            .post((req, res) => {
                res.send("book post");
            })
            .delete((req, res) => {
                res.send("book delete");
            })

#. express.static()

    内置的中间件来设置静态文件（图片、css、js等）

    app.use(express.static("assets"))

    怎么访问静态文件呢？

        http:localhost:8081/kala.jpg

    总结： express.static(path) 这个path有两种写法

        1. express.static(`${__dirname}/assets`);

        2. express.static(path.join(__dirname, "assets"));

#. Response.status()

    1. status(): res.status(400).send("NOT FOUND");

    2. send():

        res.send({name: "狗狗之家"});   // 可以直接发送对象,效果等同于 res.json()
        res.json({name: "狗狗之家"});

        res.send(`<h1>我是标题，哈哈哈哈</h1>`);

    3. download(path)  path必须是绝对路径

        __dirname: E:\code\mine\nodejs\U-Pan  表示在浏览器访问的那个路径所在的绝对路径

        app.get("/download", (req, res) => {
            res.download(`${__dirname}/demo.txt`);
        });

#. 路由

    app.js

        const express = require("express");
        const app = express();
        const birds = require("./router/birds");

        app.listen(8081);

        app.use("/birds", birds);   // 匹配的路径有: /birds 和 /birds/new_birds

        app.use("/", birds);        // 匹配的路径有: / 和 /new_birds

    birds.js

        const express = require("express");
        const router = express.Router();

        router.get("/", (req, res) => {
            res.send("birds page");
        });

        router.post("/new_birds", (req, res) => {
            res.send("new_birds page");
        });

        module.exports = router;

        总结:

            const router = express.Router();

            router具有的方法跟app差不多，具体如下

            1. router.all("*", requireAuthentication, loadUser);   等同于下面两行

                router.all('*', requireAuthentication)
                router.all('*', loadUser);

            2. router.get()
               router.post()    等

            3. router.param()   对路由参数进行提前处理

            

#. app.all()

    all() 相当于 get/post/delete等所有的http请求方法

    app.all("/about", (req, res, next) => {
        res.send("about page");
        next();
    });

    不管是什么请求方法，都会执行

    另一种用法:

    app.all("*", (req, res, next) => {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "X-Requested-With");  
        res.header("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS");  
        res.header("X-Powered-By",' 3.2.1')  
        res.header("Content-Type", "application/json;charset=utf-8");

        next();
    });

    为所有请求设置头部信息
        
#. router.param(name, callback)

    const router = express.Router();

    router.param("userId", (req, res, next, val) => {
        if (+val === 666) {
            next();
        } else {
            res.sendStatus(404);
        }
    });

    router.get("/users/:userId", (req, res) => {
        res.send("路由参数检验通过");
    });

    最后在地址栏内输入:  localhost:8081/user/666

    总结:

        router.param 会优于 router.get 执行

#. app.param()        

    app.param("id", (req, res, next, val) => {
        if (+val === 666) {
            next();
        } else {
            // next("something wrong.")
            res.sendStatus(404);
        }
    });

    app.get("/user/:id", (req, res) => {
        res.send("参数通过检验");
    });

#. TODO-CY

    app作为参数传到 router的函数里

    module.exports = function(app){
        var router = express.Router();
        router.get('/aa', function (req, res, next) {
            res.send('aaaaa');
        });
    }

#. express 创建server的两种方式

    1. const app = express();

       http.createServer(app).listen(8081);

    2. app.listen(8081);

#. app.locals 和 res.locals

    都可以用于渲染模板的两个对象

    app.locals 上通常挂在常量信息（如博客名、描述、作者信息等）    

    res.locals 上通常挂载变量信息,即每次请求的值可能不一样
