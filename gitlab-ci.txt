LINK：

    https://www.jianshu.com/p/306cf4c6789a

    https://segmentfault.com/a/1190000007180257?utm_source=tag-newest

    https://segmentfault.com/a/1190000016483568

    http://www.cnblogs.com/xishuai/p/gitlab-ci.html （关于运行的徽章）

    https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=7887  Windows 7 Service Pack 1 (SP1) 远程服务器管理工具（写博客需要用到的url）

***************

    我们公司目前采用的是：

        容器&cicd部分暂时用我们现有成熟的docker+rancher+gitlab ci+gocd方案

        后续由devops统一管理升级基于k8s的方案

***************

    遇到的问题：

        1. win7上需要安装 乌班图 ，但是在控制面板中没有找到 Hy

        
        2. gitlab 
            gtilab-runenr 
            gitlab-ci-multi-runenr

            是什么关系

            gitlab  -> gitlab-ci -> runner

#. Pipelines

    是定义 .gitlab-ci.yml文件中的不同阶段的不同任务。

    它包含多个阶段（stages）,每个阶段包含一个或多个工序（jobs）

    每个 job 可以包含的字段:

        script      必须包含的关键字。这是一个有Runner执行的shell脚本

        stage       job的阶段，区别于 stages

        only        分支名称,也可以写正则表达式

                    only: 
                        - dev
                        - /^feature\/.*$/ 这两种形式都可以

        when: manual     手动执行作业     


    gaia 的 .gitlab-ci.yml如下:

        stages:
        - test
        - build
        - deploy

        test-server: 
            stage: build
            script:
                - sed -i "s@\$NPM_URL@$NPM_URL@g" .npmrcs/ci
                - sed -i "s@\$NODE_SASS_URL@$NODE_SASS_URL@g" .npmrcs/ci
                - npmrc ci
                - npm install
                - npm run build
                - docker build -t $REGISTRY_URL/zeus-$CI_BUILD_REF_NAME/gaia:$CI_BUILD_REF .
                - docker tag $REGISTRY_URL/zeus-$CI_BUILD_REF_NAME/gaia:$CI_BUILD_REF $REGISTRY_URL/zeus-$CI_BUILD_REF_NAME/gaia:$IMAGE_VERSION
                - docker push $REGISTRY_URL/zeus-$CI_BUILD_REF_NAME/gaia:$IMAGE_VERSION
                - docker rmi -f $(docker images -q $REGISTRY_URL/zeus-$CI_BUILD_REF_NAME/gaia:$CI_BUILD_REF)
            only:
                - dev
            tags:
                - frontend

        build-feature: ...
        build-dev: ...
        build-sit: ...

        deploy-feature: ...
        deploy-dev: ...
        deploy-sit: ...

    疑问?

        Stage在执行的时候，关联到这个Stage的所有job都将被执行（并行的）

        也就是说, build阶段的 build-feature、build-dev、build-sit是同时执行的？


#. .gitlab-ci.yml的公共配置

    随着项目越来越大，job越来越多，job中包含的重复逻辑可能会让配置文件臃肿不堪。

    .gitlab-ci.yml中提供了 before_script 和 after_script 两个全局配置项。

    这两个配置项在所有job的 script 执行前和执行后调用

    eg:

        build-dev:
            script:
                - export MAVEN_OPTS="-aaaaa"
                - cd module_A
                - mvn clean compile

        build-sit:
            script:
                - export MAVEN_OPTS="-aaaaa"
                - cd module_B
                - mvn clean compile

    这其中 export MAVEN_OPTS="-Xmx256m" 显然是可以抽取公用的部分，在 before_script 的帮助下，配置文件可以优化成：

        before_script:
            - export MAVEN_OPTS="-aaaaa"

        build-dev:
            script:
                - cd module_A
                - mvn clean compile

        build-sit:
            script:
                - cd module_B
                - mvn clean compile

#. gitlab的变量工具

    在 repo 的 Setting > CI/CD > Secret variables 中，这些变量值只有项目管理员才有权限访问

    script:
    - "ls -la"
    - "ls -Rl dist"
    - 'echo "${AMAZON_PEM}" > amazon.pem'
    - "chmod 600 amazon.pem"
    - "scp -o StrictHostKeyChecking=no -i amazon.pem -r dist/* ${AMAZON_NAME_IP}:/usr/share/nginx/html/"