俚语：

	worked like charm 非常好用

	can you attach the html code as well?

	I also hit this issue.

	I`m closing this issue, since vscode-tslint can do nothing to address it.

	I also encounter this issue。

=========



1. Back in August 2012 I wrote a post on building a command line tool in NodeJs.
	That post is now over two years old and plenty has changed, hence i thought it worth writing a new post building the same tool.showing how i`d do it now.

	重点词汇：

	plenty	充裕，富裕；大量很多
	hence	从此，因此，所以
	command line 命令行
	post	邮寄，信，张贴

2. Answer the prompts if you wish. or just hit enter a bunch of times to get a template package.json file that you can fill out at you own leisure.

	leisure 	闲暇,悠闲,空闲时间
	fill out 	填写，充实，长胖，鼓起
	a bunch of 	一群，一束，一堆
	prompts 	促使，提示

3. We need to make a couple of edits to it.

	a couple of 两个，几个

	我们需要对它做几次编辑。

4. the bin object, which maps commands to files.

	maps	映射

	映射命令到文件

5. frontend backend

	前端 	后端

	frontend dependencies  前端依赖

	post-message 弹窗消息

	override 覆盖，推翻，优先于，无视，践踏

6. splice	胶接，粘接

	array.splice(2,1);			// 删除index:2的元素
	array.splice(2,0,'hello');	// 在index:2的位置添加hello元素

#. embed 	/im`bed/	把...嵌入，栽种，深留(记忆中)

	an operation to remove glass that was embedded in his leg.

		取出扎入他腿部玻璃的手术

	the bullet embedded itself in the wall.

		子弹射进了墙里

#. deem		/dim/ 认为，视为，以为，做某种评价，主张，断定

	the evening was deemed a great success.

		大家认为这次晚会非常成功。

	they would take any action deemed necessary.

		他们会采取认为必要的行动。

#. reject

#. ideal

	the beach is ideal for children.

		这个海滩是孩子的理想去处。

	she`s the ideal candidate for the job.

		她是这项工作最合适的人选。

#. mustache

	js中值模板插值表达式

#. refactor	重构		/reifacter/	

#. charm

	works like a charm	非常管用，十分好用

#. bulk	大量，批量，整批，成堆（块）	

	in bulk 

	buying in bulk is more economical than shopping for small quantities.

	批量采购要比零卖实惠很多。

#. clues

	the response body may contain clues as to what went wrong.

	响应提可能包含关于出错的线索	

#. rating	等级，评估，收视率，估价，

#. rate 	速度，比率，等级；认为，被评价

	API rate limit		速率限制

#. disposable	一次性的，可任意处理的；免洗的。使用后随即抛掉的东西	

#. mission 使命，天职

#. alternative

	alternative energy 

	alternative approach

	they are hard to find in alternative offerings.

	We had no alternative but to fire Join.		(fire 多义词)

	You can be paid in cash weekly or by cheque monthly; those are the two alternative.

#. let alone

	He didn`t allow himself to show his statisfaction, of course, let alone to speak of it. 

	We fear no death, let alone difficulties.

	He did not have enough money to have the tire patched up, let alone buy a new one.
	
	tire 多义词

	tired

#. applicant 申请人，请求者，求职人

	申请人信息： applicant info

#. quota

	he was 76 votes short of the quota.	（规定票数，最低票数）

	I`m going home now. I`ve done my quota of work for the day.


#. stdout 标准输出（设备）文件

	standard output

#. duplex	dju:pleks

	有两部分的

	stream 有四种流类型:

		Readable	可读

		writable	可写

		duplex		可读可写

		Transform	操作被写入数据，然后读出数据

#. named after...

	the machine is named after its inventor.

	in my youth my ambition had been to be an invntor.
	

#. A class is a blueprint from which we can create objects that share the same configuration - properties and methods

 The decision to use a class or an interface truly depends on our use case: type-checking only, implementation details (typically via creating a new instance), or even both! 

 type-checking  

 We can use classes for type-checking and the underlying implementation - whereas we cannot with an interface.

#. TypeScript boosts JavaScript classes with extra power such as type-checking and static properties.

	boost

	it wants the government to take action to boost the economy.

	a great welcome boost

#. This also means that whenever we transpile our code to whatever target JavaScript of our choice, the transpiler will keep all of our class code present in the transpiled file. Hence, classes are present throughout all the phases of our code.

#. we are using a handy TypeScript shorthand to define class properties from the arguments of the constructor 

	a handy  little tool

	have you got a pen handy?

	our house is verty handy for the station

	shorthand

	i took down his comments in shorthand.

#. Aside from the Pizza name before the pizza object that shows that the object is in fact an instance of the Pizza class,

	aside from   

	the food is vervy good, aisde from ( except for ) the patotas were a little salty.


#. Both approaches yield an object with the same structure

	yield    

#. Hence, classes are present throughout all the phases of our code.

	throughout 

	因此，在代码的所有阶段都存在类	

#. pool

	freshwater pool

	thread pool

#. what decision to make when specific conditions are enocuntered.

	specific

	enocuntered

#. fundamental

	jobs are the most fundamental element of a .gitlab-ci.yml file

#. constraints stating

	defined with constraints stating under what conditions they should be executed.

#. arbitrary

	Top-level elements with an arbitrary name and must contain at least the script clause.

	clause

#. embedded

	Each instance of Gitlab CI has an embedded debug tool called Lint,

	which validates the content of your .gitlab-ci.yml files. You can find the Lint

	under the page ci/lint of your project namespace.	

#. ascending

	Emits ascending numbers, one every second, starting after 3s.

#. composable

	Selectors are composable. they can be used as input to other selectors.

#. migrate

	to migrate the code follow the example below

#. obtain

	Selectors are pure function used for obtaining slices of store state.

#. achieve

	you can use createSelector to achieve just that.

#. approaches

	Both of these approaches represent the concept of a selector - we are 'selecting' state!

#. pay close attention to 

	let`s pay close attention to the structure of state.

#. for the sake of 	

	for the sake of clarity

	for the sake of simplicity

	for the sake of completeness

	(Note that usually I would use an action creator to create the action inside the map, so it would just be map(todoListFetched) , but for the sake of clarity I created the action manually here.)

#. internal

	a switchMap takes an incoming observable, creates a new (internal) Observable, and emits those internal Observable’s values whenever it emits. 

#. upstream Observable

	on the other hand, catchError does not do any wrapping. it waits for the upstream Observable to fail, and if it does,

	it will create a new Observable and replace upstream one with that one. Put simply, its internal logic is as follows: While the upstream Observable emits values, emit the same values; if the upstream Observable fails, start emitting values from the callback. The important part here is the realisation that once an Observable has failed, it will never go back to a successful state, so the catchError method lets you prevent that by replacing the failed one with a successful one. This is slightly unexpected but makes sense if you’re coming from a Promise-based world: In a promise, the .catch method lets you turn a failed promise back into a successful one. But because Promises are basically Observables of one value, this does not have any unexpected side effects, whereas in Observables saying “stop and emit this new value” will not allow future values to be emitted.

	LINK: https://medium.com/city-pantry/handling-errors-in-ngrx-effects-a95d918490d9

#. maintenance

	Github pages is temporarily down for maintenance.

#. without changing or affecting them in any way

	concat will subscribe to first input Observable and emit all its values, without changing

	or affecting them in any way.

#. check out merge instead

	if you would like to emit values from passed Observables concurrently, check out merge instead

#. as a matter of fact

	as a matter of fact, concat is an equivalent of merge operator with concurrent parameter set to 1.

#. higher-order operator	

#. process

	such process is often referred to as flattening in documentation.

#. be concerned with

	if you`re not concerned with the order of emissions and is simply interested in all valued

	coming out from multiple combined streams as if they were produced by one stream.

#. gracefully
	
	Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.

#. encountered  / the final time

	an observable calls this method after it has called onNext for the final time, if it has not encountered any error.

#. reproduce

	How I can reproduce your issues

#.	regardless

	regard 

#. corresponing

	in most case, we need to fetch data and render with template files.

	So we need to use corresponing view engines.

#. enlarge text	

#. analogous to

	the pipe() function is analogous to, but not the same thing as, the .pipe() method on an Observable.
	
#. scratch

	creating new operators from scratch.

#. forward  towards

	a big step forward towards the future of the web: Web Component.

#. tipping point

	i believe web components represent a tipping point.

	and as i mentioned before there may be some developers that experience the transition

	refusing and resisting instead of embracing the improvements.

#. sentry is a tool that can help after our applications are on production.